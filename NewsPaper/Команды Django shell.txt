from news.models import *

1. Создать двух пользователей (с помощью метода User.objects.create_user).
user1 = User.objects.create_user(username='Peter Robertson')
user2 = User.objects.create_user(username='Julia Donaldson')


2. Создать два объекта модели Author, связанные с пользователями.
Author.objects.create(authorUser=user1)
Author.objects.create(authorUser=user2)


3. Добавить 4 категории в модель Category.
Category.objects.create(name='IT')
Category.objects.create(name='Python')
Category.objects.create(name='Health')
Category.objects.create(name='Education')


4. Добавить 2 статьи и 1 новость.
Post.objects.create(author=Author.objects.get(authorUser=User.objects.get(username='Peter Robertson')),
                   categoryType='AR', title='text_title1', text='text1')
Post.objects.create(author=Author.objects.get(authorUser=User.objects.get(username='Julia Donaldson')),
                   categoryType='AR', title='text_title2', text='text2')
Post.objects.create(author=Author.objects.get(authorUser=User.objects.get(username='Peter Robertson')),
                   categoryType='NW', title='text_title3', text='text3')


5. Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий).
p1 = Post.objects.get(pk=1)
p2 = Post.objects.get(pk=2)
p3 = Post.objects.get(pk=3)
c1 = Category.objects.get(name='IT')
c2 = Category.objects.get(name='Python')
c3 = Category.objects.get(name='Health')
c4 = Category.objects.get(name='Education')
p1.postCategory.add(c1, c2)
p2.postCategory.add(c3)
p3.postCategory.add(c4)


6. Создать как минимум 4 комментария к разным объектам модели Post (в каждом объекте должен быть
как минимум один комментарий).
Comment.objects.create(commentUser=User.objects.get(username='Peter Robertson'), commentPost=Post.objects.get(pk=1),
                       text='comment_text1')
Comment.objects.create(commentUser=User.objects.get(username='Julia Donaldson'), commentPost=Post.objects.get(pk=1),
                       text='comment_text2')
Comment.objects.create(commentUser=User.objects.get(username='Peter Robertson'), commentPost=Post.objects.get(pk=2),
                       text='comment_text3')
Comment.objects.create(commentUser=User.objects.get(username='Julia Donaldson'), commentPost=Post.objects.get(pk=3),
                       text='comment_text4')


7. Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов.
Post.objects.get(pk=1).like()
Post.objects.get(pk=1).like()
Post.objects.get(pk=2).like()
Post.objects.get(pk=2).dislike()
Post.objects.get(pk=3).like()
Comment.objects.get(pk=1).dislike()
Comment.objects.get(pk=1).like()
Comment.objects.get(pk=2).like()
Comment.objects.get(pk=3).like()
Comment.objects.get(pk=3).dislike()
Comment.objects.get(pk=4).like()


8. Обновить рейтинги пользователей.
Author.objects.get(authorUser=User.objects.get(username='Peter Robertson')).update_rating()
Author.objects.get(authorUser=User.objects.get(username='Julia Donaldson')).update_rating()


9. Вывести username и рейтинг лучшего пользователя (применяя сортировку и возвращая поля первого объекта).
best = Author.objects.all().order_by('-authorRating').values('authorUser', 'authorRating')[0]
print(best)


10. Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи, основываясь '
на лайках/дислайках к этой статье.
bestArticle = Post.objects.filter(categoryType='AR').order_by('-rating')[0]
bestArticleDate = bestArticle.dateCreation.strftime('%A, %d. %B %Y %I:%M%p')
bestArticleAuthor = bestArticle.author
bestArticleRating = bestArticle.rating
bestArticleTitle = bestArticle.title
bestArticleText = bestArticle.preview()

print(bestArticleDate, bestArticleAuthor, bestArticleRating, bestArticleTitle, bestArticleText)


11. Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье.
comment = Comment.objects.filter(commentPost=bestArticle).values('dateCreation', 'commentUser', 'rating', 'text')
com1 = comment.values('commentUser', 'rating', 'text')[0]
com2 = comment.values('commentUser', 'rating', 'text')[1]
cDate1 = comment[0]['dateCreation'].strftime('%A, %d. %B %Y %I:%M%p')
cDate2 = comment[1]['dateCreation'].strftime('%A, %d. %B %Y %I:%M%p')

print(cDate1, com1, cDate2, com2)
